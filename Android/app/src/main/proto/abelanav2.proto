//
// Copyright 2015 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

syntax = "proto3";

package abelanav2.grpc;

option java_multiple_files = true;
option java_package = "com.examples.abelanav2.grpc";

//option objc_class_prefix = "AGRPC";


// The abelana service definition.
service Abelana {
    // Sign-in the user
    rpc SignIn (SignInRequest) returns (SignInResponse) {}

    // Home screen: photo stream
    rpc PhotoStream(PhotoListRequest) returns (PhotoListResponse) {}
    rpc FlagPhoto(FlagRequest) returns (StatusResponse) {}

    // My pictures
    rpc ListMyPhotos(PhotoListRequest) returns (PhotoListResponse) {}
    rpc UploadPhoto(NewPhotoRequest) returns (UploadPhotoResponse) {}
    rpc EditPhoto(EditPhotoRequest) returns (StatusResponse) {}
    rpc DeletePhoto(DeletePhotoRequest) returns (StatusResponse) {}

    // My likes
    rpc ListMyLikes(PhotoListRequest) returns (PhotoListResponse) {}
    rpc RatePhoto(VoteRequest) returns (StatusResponse) {}
}

// Generic message sent when there is nothing else to send back
message StatusResponse {
    Error error = 1;
}

message Error {
    string code = 1;
    string details = 2;
}

// The request message containing the gitkit token.
message SignInRequest {
    string gitkit_token = 1;
}

// The response message containing the token generated by the server to
// identify the user
message SignInResponse {
    Error error = 1;
    string user_token = 2;
}

// Describes a photo and its attributes
message Photo {
    int64 photo_id = 1;
    int64 user_id = 2;
    int64 date = 3;
    string description = 4;
    int64 rating = 5;
}

// The request message to get a list of Photo
message PhotoListRequest {
    int64 page_number = 1;
}

// The response message containing a list of Photo
message PhotoListResponse {
    Error error = 1;
    repeated Photo photo = 2;
    int64 next_page = 3;
}

// The request message describing a new photo
message NewPhotoRequest {
    string description = 1;
}

// The request message describing an edited photo
message EditPhotoRequest {
    int64 photo_id = 1;
    string description = 2;
}

message DeletePhotoRequest {
    int64 photo_id = 1;
}

message FlagRequest {
    int64 photo_id = 1;
}

message VoteRequest {
    int64 photo_id = 1;

    enum VoteType {
        UNKNOWN = 0;
        THUMBS_UP = 1;
        NEUTRAL = 2;
        THUMBS_DOWN = 3;
    }

    VoteType vote = 2;
}

// The response message containing the id of a photo to upload
// The client will use this id to store the picture on GCS.
message UploadPhotoResponse {
    Error error = 1;
    int64 photo_id = 2;
}
