/*
 * Copyright 2015 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: abelanav2.proto

#import "GPBProtocolBuffers_RuntimeSupport.h"
#import "Abelanav2.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma mark - AGRPCAbelanav2Root

@implementation AGRPCAbelanav2Root

@end

static GPBFileDescriptor *AGRPCAbelanav2Root_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"abelanav2.grpc"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - AGRPCStatusResponse

@implementation AGRPCStatusResponse

@dynamic hasError, error;

typedef struct AGRPCStatusResponse_Storage {
  uint32_t _has_storage_[1];
  AGRPCError *error;
} AGRPCStatusResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = AGRPCStatusResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(AGRPCStatusResponse_Storage, error),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(AGRPCError),
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[AGRPCStatusResponse class]
                                              rootClass:[AGRPCAbelanav2Root class]
                                                   file:AGRPCAbelanav2Root_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(AGRPCStatusResponse_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - AGRPCError

@implementation AGRPCError

@dynamic code;
@dynamic details;

typedef struct AGRPCError_Storage {
  uint32_t _has_storage_[1];
  NSString *code;
  NSString *details;
} AGRPCError_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "code",
        .number = AGRPCError_FieldNumber_Code,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(AGRPCError_Storage, code),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "details",
        .number = AGRPCError_FieldNumber_Details,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(AGRPCError_Storage, details),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[AGRPCError class]
                                              rootClass:[AGRPCAbelanav2Root class]
                                                   file:AGRPCAbelanav2Root_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(AGRPCError_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - AGRPCSignInRequest

@implementation AGRPCSignInRequest

@dynamic gitkitToken;

typedef struct AGRPCSignInRequest_Storage {
  uint32_t _has_storage_[1];
  NSString *gitkitToken;
} AGRPCSignInRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "gitkitToken",
        .number = AGRPCSignInRequest_FieldNumber_GitkitToken,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(AGRPCSignInRequest_Storage, gitkitToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[AGRPCSignInRequest class]
                                              rootClass:[AGRPCAbelanav2Root class]
                                                   file:AGRPCAbelanav2Root_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(AGRPCSignInRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - AGRPCSignInResponse

@implementation AGRPCSignInResponse

@dynamic hasError, error;
@dynamic userToken;

typedef struct AGRPCSignInResponse_Storage {
  uint32_t _has_storage_[1];
  AGRPCError *error;
  NSString *userToken;
} AGRPCSignInResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = AGRPCSignInResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(AGRPCSignInResponse_Storage, error),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(AGRPCError),
        .fieldOptions = NULL,
      },
      {
        .name = "userToken",
        .number = AGRPCSignInResponse_FieldNumber_UserToken,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(AGRPCSignInResponse_Storage, userToken),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[AGRPCSignInResponse class]
                                              rootClass:[AGRPCAbelanav2Root class]
                                                   file:AGRPCAbelanav2Root_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(AGRPCSignInResponse_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - AGRPCPhoto

@implementation AGRPCPhoto

@dynamic photoId;
@dynamic userId;
@dynamic date;
@dynamic description_p;
@dynamic rating;
@dynamic uRL;

typedef struct AGRPCPhoto_Storage {
  uint32_t _has_storage_[1];
  NSString *userId;
  NSString *description_p;
  NSString *uRL;
  int64_t photoId;
  int64_t date;
  int64_t rating;
} AGRPCPhoto_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "photoId",
        .number = AGRPCPhoto_FieldNumber_PhotoId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(AGRPCPhoto_Storage, photoId),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userId",
        .number = AGRPCPhoto_FieldNumber_UserId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(AGRPCPhoto_Storage, userId),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "date",
        .number = AGRPCPhoto_FieldNumber_Date,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(AGRPCPhoto_Storage, date),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "description_p",
        .number = AGRPCPhoto_FieldNumber_Description_p,
        .hasIndex = 3,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(AGRPCPhoto_Storage, description_p),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "rating",
        .number = AGRPCPhoto_FieldNumber_Rating,
        .hasIndex = 4,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(AGRPCPhoto_Storage, rating),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "uRL",
        .number = AGRPCPhoto_FieldNumber_URL,
        .hasIndex = 5,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .type = GPBTypeString,
        .offset = offsetof(AGRPCPhoto_Storage, uRL),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\001\006\001!!\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    descriptor = [GPBDescriptor allocDescriptorForClass:[AGRPCPhoto class]
                                              rootClass:[AGRPCAbelanav2Root class]
                                                   file:AGRPCAbelanav2Root_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(AGRPCPhoto_Storage)
                                             wireFormat:NO
                                    extraTextFormatInfo:extraTextFormatInfo];
  }
  return descriptor;
}

@end

#pragma mark - AGRPCPhotoListRequest

@implementation AGRPCPhotoListRequest

@dynamic pageNumber;

typedef struct AGRPCPhotoListRequest_Storage {
  uint32_t _has_storage_[1];
  int64_t pageNumber;
} AGRPCPhotoListRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "pageNumber",
        .number = AGRPCPhotoListRequest_FieldNumber_PageNumber,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(AGRPCPhotoListRequest_Storage, pageNumber),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[AGRPCPhotoListRequest class]
                                              rootClass:[AGRPCAbelanav2Root class]
                                                   file:AGRPCAbelanav2Root_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(AGRPCPhotoListRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - AGRPCPhotoListResponse

@implementation AGRPCPhotoListResponse

@dynamic hasError, error;
@dynamic photoArray;
@dynamic nextPage;

typedef struct AGRPCPhotoListResponse_Storage {
  uint32_t _has_storage_[1];
  AGRPCError *error;
  NSMutableArray *photoArray;
  int64_t nextPage;
} AGRPCPhotoListResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = AGRPCPhotoListResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(AGRPCPhotoListResponse_Storage, error),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(AGRPCError),
        .fieldOptions = NULL,
      },
      {
        .name = "photoArray",
        .number = AGRPCPhotoListResponse_FieldNumber_PhotoArray,
        .hasIndex = GPBNoHasBit,
        .flags = GPBFieldRepeated,
        .type = GPBTypeMessage,
        .offset = offsetof(AGRPCPhotoListResponse_Storage, photoArray),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(AGRPCPhoto),
        .fieldOptions = NULL,
      },
      {
        .name = "nextPage",
        .number = AGRPCPhotoListResponse_FieldNumber_NextPage,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(AGRPCPhotoListResponse_Storage, nextPage),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[AGRPCPhotoListResponse class]
                                              rootClass:[AGRPCAbelanav2Root class]
                                                   file:AGRPCAbelanav2Root_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(AGRPCPhotoListResponse_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - AGRPCNewPhotoRequest

@implementation AGRPCNewPhotoRequest

@dynamic description_p;

typedef struct AGRPCNewPhotoRequest_Storage {
  uint32_t _has_storage_[1];
  NSString *description_p;
} AGRPCNewPhotoRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "description_p",
        .number = AGRPCNewPhotoRequest_FieldNumber_Description_p,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(AGRPCNewPhotoRequest_Storage, description_p),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[AGRPCNewPhotoRequest class]
                                              rootClass:[AGRPCAbelanav2Root class]
                                                   file:AGRPCAbelanav2Root_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(AGRPCNewPhotoRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - AGRPCEditPhotoRequest

@implementation AGRPCEditPhotoRequest

@dynamic photoId;
@dynamic description_p;

typedef struct AGRPCEditPhotoRequest_Storage {
  uint32_t _has_storage_[1];
  NSString *description_p;
  int64_t photoId;
} AGRPCEditPhotoRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "photoId",
        .number = AGRPCEditPhotoRequest_FieldNumber_PhotoId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(AGRPCEditPhotoRequest_Storage, photoId),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "description_p",
        .number = AGRPCEditPhotoRequest_FieldNumber_Description_p,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(AGRPCEditPhotoRequest_Storage, description_p),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[AGRPCEditPhotoRequest class]
                                              rootClass:[AGRPCAbelanav2Root class]
                                                   file:AGRPCAbelanav2Root_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(AGRPCEditPhotoRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - AGRPCDeletePhotoRequest

@implementation AGRPCDeletePhotoRequest

@dynamic photoId;

typedef struct AGRPCDeletePhotoRequest_Storage {
  uint32_t _has_storage_[1];
  int64_t photoId;
} AGRPCDeletePhotoRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "photoId",
        .number = AGRPCDeletePhotoRequest_FieldNumber_PhotoId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(AGRPCDeletePhotoRequest_Storage, photoId),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[AGRPCDeletePhotoRequest class]
                                              rootClass:[AGRPCAbelanav2Root class]
                                                   file:AGRPCAbelanav2Root_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(AGRPCDeletePhotoRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - AGRPCFlagRequest

@implementation AGRPCFlagRequest

@dynamic photoId;

typedef struct AGRPCFlagRequest_Storage {
  uint32_t _has_storage_[1];
  int64_t photoId;
} AGRPCFlagRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "photoId",
        .number = AGRPCFlagRequest_FieldNumber_PhotoId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(AGRPCFlagRequest_Storage, photoId),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[AGRPCFlagRequest class]
                                              rootClass:[AGRPCAbelanav2Root class]
                                                   file:AGRPCAbelanav2Root_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(AGRPCFlagRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

#pragma mark - AGRPCVoteRequest

@implementation AGRPCVoteRequest

@dynamic photoId;
@dynamic vote;

typedef struct AGRPCVoteRequest_Storage {
  uint32_t _has_storage_[1];
  AGRPCVoteRequest_VoteType vote;
  int64_t photoId;
} AGRPCVoteRequest_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "photoId",
        .number = AGRPCVoteRequest_FieldNumber_PhotoId,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(AGRPCVoteRequest_Storage, photoId),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "vote",
        .number = AGRPCVoteRequest_FieldNumber_Vote,
        .hasIndex = 1,
        .flags = GPBFieldOptional | GPBFieldHasEnumDescriptor,
        .type = GPBTypeEnum,
        .offset = offsetof(AGRPCVoteRequest_Storage, vote),
        .defaultValue.valueEnum = AGRPCVoteRequest_VoteType_Unknown,
        .typeSpecific.enumDescFunc = AGRPCVoteRequest_VoteType_EnumDescriptor,
        .fieldOptions = NULL,
      },
    };
    static GPBMessageEnumDescription enums[] = {
      { .enumDescriptorFunc = AGRPCVoteRequest_VoteType_EnumDescriptor },
    };
    descriptor = [GPBDescriptor allocDescriptorForClass:[AGRPCVoteRequest class]
                                              rootClass:[AGRPCAbelanav2Root class]
                                                   file:AGRPCAbelanav2Root_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:enums
                                              enumCount:sizeof(enums) / sizeof(GPBMessageEnumDescription)
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(AGRPCVoteRequest_Storage)
                                             wireFormat:NO];
  }
  return descriptor;
}

@end

int32_t AGRPCVoteRequest_Vote_RawValue(AGRPCVoteRequest *message) {
  GPBDescriptor *descriptor = [AGRPCVoteRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AGRPCVoteRequest_FieldNumber_Vote];
  return GPBGetInt32IvarWithField(message, field);
}

void SetAGRPCVoteRequest_Vote_RawValue(AGRPCVoteRequest *message, int32_t value) {
  GPBDescriptor *descriptor = [AGRPCVoteRequest descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:AGRPCVoteRequest_FieldNumber_Vote];
  GPBSetInt32IvarWithFieldInternal(message, field, value, descriptor.file.syntax);
}

#pragma mark - Enum AGRPCVoteRequest_VoteType

GPBEnumDescriptor *AGRPCVoteRequest_VoteType_EnumDescriptor(void) {
  static GPBEnumDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageEnumValueDescription values[] = {
      { .name = "Unknown", .number = AGRPCVoteRequest_VoteType_Unknown },
      { .name = "ThumbsUp", .number = AGRPCVoteRequest_VoteType_ThumbsUp },
      { .name = "Neutral", .number = AGRPCVoteRequest_VoteType_Neutral },
      { .name = "ThumbsDown", .number = AGRPCVoteRequest_VoteType_ThumbsDown },
    };
    descriptor = [GPBEnumDescriptor allocDescriptorForName:GPBNSStringifySymbol(AGRPCVoteRequest_VoteType)
                                                   values:values
                                               valueCount:sizeof(values) / sizeof(GPBMessageEnumValueDescription)
                                             enumVerifier:AGRPCVoteRequest_VoteType_IsValidValue];
  }
  return descriptor;
}

BOOL AGRPCVoteRequest_VoteType_IsValidValue(int32_t value__) {
  switch (value__) {
    case AGRPCVoteRequest_VoteType_Unknown:
    case AGRPCVoteRequest_VoteType_ThumbsUp:
    case AGRPCVoteRequest_VoteType_Neutral:
    case AGRPCVoteRequest_VoteType_ThumbsDown:
      return YES;
    default:
      return NO;
  }
}

#pragma mark - AGRPCUploadPhotoResponse

@implementation AGRPCUploadPhotoResponse

@dynamic hasError, error;
@dynamic photoId;
@dynamic userId;
@dynamic uploadURL;

typedef struct AGRPCUploadPhotoResponse_Storage {
  uint32_t _has_storage_[1];
  AGRPCError *error;
  NSString *userId;
  NSString *uploadURL;
  int64_t photoId;
} AGRPCUploadPhotoResponse_Storage;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = NULL;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "error",
        .number = AGRPCUploadPhotoResponse_FieldNumber_Error,
        .hasIndex = 0,
        .flags = GPBFieldOptional,
        .type = GPBTypeMessage,
        .offset = offsetof(AGRPCUploadPhotoResponse_Storage, error),
        .defaultValue.valueMessage = nil,
        .typeSpecific.className = GPBStringifySymbol(AGRPCError),
        .fieldOptions = NULL,
      },
      {
        .name = "photoId",
        .number = AGRPCUploadPhotoResponse_FieldNumber_PhotoId,
        .hasIndex = 1,
        .flags = GPBFieldOptional,
        .type = GPBTypeInt64,
        .offset = offsetof(AGRPCUploadPhotoResponse_Storage, photoId),
        .defaultValue.valueInt64 = 0LL,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "userId",
        .number = AGRPCUploadPhotoResponse_FieldNumber_UserId,
        .hasIndex = 2,
        .flags = GPBFieldOptional,
        .type = GPBTypeString,
        .offset = offsetof(AGRPCUploadPhotoResponse_Storage, userId),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
      {
        .name = "uploadURL",
        .number = AGRPCUploadPhotoResponse_FieldNumber_UploadURL,
        .hasIndex = 3,
        .flags = GPBFieldOptional | GPBFieldTextFormatNameCustom,
        .type = GPBTypeString,
        .offset = offsetof(AGRPCUploadPhotoResponse_Storage, uploadURL),
        .defaultValue.valueString = nil,
        .typeSpecific.className = NULL,
        .fieldOptions = NULL,
      },
    };
#if GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    const char *extraTextFormatInfo = NULL;
#else
    static const char *extraTextFormatInfo = "\001\004\006\241!!\000";
#endif  // GPBOBJC_SKIP_MESSAGE_TEXTFORMAT_EXTRAS
    descriptor = [GPBDescriptor allocDescriptorForClass:[AGRPCUploadPhotoResponse class]
                                              rootClass:[AGRPCAbelanav2Root class]
                                                   file:AGRPCAbelanav2Root_FileDescriptor()
                                                 fields:fields
                                             fieldCount:sizeof(fields) / sizeof(GPBMessageFieldDescription)
                                                 oneofs:NULL
                                             oneofCount:0
                                                  enums:NULL
                                              enumCount:0
                                                 ranges:NULL
                                             rangeCount:0
                                            storageSize:sizeof(AGRPCUploadPhotoResponse_Storage)
                                             wireFormat:NO
                                    extraTextFormatInfo:extraTextFormatInfo];
  }
  return descriptor;
}

@end


// @@protoc_insertion_point(global_scope)
